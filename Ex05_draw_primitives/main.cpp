#include "cgg/Graphics.h"
#include <iostream>

float g_time = 0;

Vec3 g_pointsV[] = 
{
	Vec3(-1.0f, -1.0f, 0.0f),
	Vec3( 1.0f, -1.0f, 0.0f),
	Vec3( 1.0f,  1.0f, 0.0f),
	Vec3(-1.0f,  1.0f, 0.0f)
};

VertexNormal g_pointsVN[] = 
{
	{ Vec3(-1.0f, -1.0f, 0.0f), Vec3(0.0f, 0.0f, 1.0f) },
	{ Vec3( 1.0f, -1.0f, 0.0f), Vec3(0.0f, 0.0f, 1.0f) },
	{ Vec3( 1.0f,  1.0f, 0.0f), Vec3(0.0f, 0.0f, 1.0f) },
	{ Vec3(-1.0f,  1.0f, 0.0f), Vec3(0.0f, 0.0f, 1.0f) }
};

VertexColour g_pointsVC[] = 
{
	{ Vec3(-1.0f, -1.0f, 0.0f), Vec3(1.0f, 1.0f, 0.0f) },
	{ Vec3( 1.0f, -1.0f, 0.0f), Vec3(1.0f, 0.0f, 0.0f) },
	{ Vec3( 1.0f,  1.0f, 0.0f), Vec3(0.0f, 1.0f, 0.0f) },
	{ Vec3(-1.0f,  1.0f, 0.0f), Vec3(0.0f, 0.0f, 1.0f) }
};

VertexNormalColour g_pointsVNC[] = 
{
	{ Vec3(-1.0f, -1.0f, 0.0f), Vec3(0.0f, 0.0f, 1.0f), Vec3(1.0f, 1.0f, 0.0f) },
	{ Vec3( 1.0f, -1.0f, 0.0f), Vec3(0.0f, 0.0f, 1.0f), Vec3(1.0f, 0.0f, 0.0f) },
	{ Vec3( 1.0f,  1.0f, 0.0f), Vec3(0.0f, 0.0f, 1.0f), Vec3(0.0f, 1.0f, 0.0f) },
	{ Vec3(-1.0f,  1.0f, 0.0f), Vec3(0.0f, 0.0f, 1.0f), Vec3(0.0f, 0.0f, 1.0f) }
};


//------------------------------------------------------------------------------------------------------------------------------------
// called when we initialise the app
//------------------------------------------------------------------------------------------------------------------------------------
void init()
{
}

//------------------------------------------------------------------------------------------------------------------------------------
// called when we need to update the app. 'dt' is the time delta (the number of seconds since the last frame)
//------------------------------------------------------------------------------------------------------------------------------------
void update(float dt)
{
	g_time += dt;
}

//------------------------------------------------------------------------------------------------------------------------------------
// called when we want to draw the 3D data in our app.
//------------------------------------------------------------------------------------------------------------------------------------
void draw3D()
{
	// draw the grid on the floor
	setColour(0.25f, 0.25f, 0.25f);
	for(float i = -10.0f; i <= 10.1f; i += 1.0f)
	{
		Vec3 zmin(i, 0, -10);
		Vec3 zmax(i, 0,  10);
		Vec3 xmin(-10, 0, i);
		Vec3 xmax(10, 0, i);
		drawLine(xmin, xmax);
		drawLine(zmin, zmax);
	}

	pushMatrix();
		translate(-8.0f, 0, 0);
		drawPrimitives(g_pointsV, 4, kQuads);
	popMatrix();

	pushMatrix();
		translate(-3.0f, 0, 0);
		drawPrimitives(g_pointsVC, 4, kQuads);
	popMatrix();

	enableLighting();
		setColour(1.0f, 1.0f, 1.0f);

		pushMatrix();
			translate(3.0f, 0, 0);
			drawPrimitives(g_pointsVN, 4, kQuads);
		popMatrix();

		pushMatrix();
			translate(8.0f, 0, 0);
			drawPrimitives(g_pointsVNC, 4, kQuads);
		popMatrix();
	disableLighting();

}

//------------------------------------------------------------------------------------------------------------------------------------
// called when we want to draw a 2D overlay
//------------------------------------------------------------------------------------------------------------------------------------
void draw()
{
}

//------------------------------------------------------------------------------------------------------------------------------------
/// called when the left mouse button is pressed
//------------------------------------------------------------------------------------------------------------------------------------
void mousePress(int x, int y)
{
	Vec2 p = getScreenCoordinates(x, y);
}

//------------------------------------------------------------------------------------------------------------------------------------
/// called when the left mouse button is released
//------------------------------------------------------------------------------------------------------------------------------------
void mouseRelease(int x, int y)
{
	Vec2 p = getScreenCoordinates(x, y);
}

//------------------------------------------------------------------------------------------------------------------------------------
/// called when the mouse is moved (and the left button is held)
//------------------------------------------------------------------------------------------------------------------------------------
void mouseMove(int x, int y)
{
	Vec2 p = getScreenCoordinates(x, y);
}

//------------------------------------------------------------------------------------------------------------------------------------
/// main  \o/
//------------------------------------------------------------------------------------------------------------------------------------
int main()
{
	// just run the app.... 
	return runApp();
}
